<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ output extension=".cs" #>
<# // derived from https://stackoverflow.com/questions/32664/is-there-a-constraint-that-restricts-my-generic-method-to-numeric-types/4834066#4834066 #>
<# //Type[] types = new[] {
   // typeof(Int16), typeof(Int32), typeof(Int64),
   // typeof(UInt16), typeof(UInt32), typeof(UInt64),
   // typeof(Byte), typeof(SByte), typeof(Single), typeof(Double)
   // };
#>
<# // Item1 is the target type, Item2 is the datatype for MinValue (for zeroCount) #>
<# // These types should be limited to primitive types #>
<# string[] typeNames = new[] {
    "int",
    "short",
    "float",
    "double",
    };
#>
/*
* This file is automatically generated from IntensityConverterCLZF.tt. Edit IntensityConverterCLZF.tt to automatically update all type-specific variants of these functions.
*/
using System;
using System.Collections.Generic;
using System.Linq;

// ReSharper disable UnusedMember.Global

namespace UIMFLibrary
{
    /// <summary>
    /// Utilities for encoding intensity using run length encoding and LZF
    /// </summary>
    public static class IntensityConverterCLZF
    {
<# foreach (var typeName in typeNames) {#>

        /// <summary>
        /// Convert an array of intensities to a zero run length encoded and LZF compressed byte array
        /// </summary>
        /// <param name="intensities">Array of intensities, including all zeros</param>
        /// <param name="spectra">Spectra intensity bytes (output)</param>
        /// <param name="tic">TIC (output)</param>
        /// <param name="bpi">Base peak intensity (output)</param>
        /// <param name="indexOfMaxIntensity">Index number of the BPI</param>
        /// <returns>
        /// Number of non-zero data points
        /// </returns>
        public static int Compress(
            IReadOnlyList<<#= typeName #>> intensities,
            out byte[] spectra,
            out double tic,
            out double bpi,
            out int indexOfMaxIntensity)
        {
            // Get the size of the data type. Use of sizeof() for primitives is allowed in safe code blocks
            const int dataTypeSize = sizeof(<#= typeName #>);

            spectra = null;
            var nonZeroCount = RlzEncode.Encode(intensities, out var runLengthZeroEncodedData, out tic, out bpi, out indexOfMaxIntensity);
            var encodedDataLength = runLengthZeroEncodedData.Length;

            if (encodedDataLength > 0)
            {
                spectra = new byte[encodedDataLength * dataTypeSize];
                Buffer.BlockCopy(runLengthZeroEncodedData, 0, spectra, 0, encodedDataLength * dataTypeSize);
                spectra = CLZF2.Compress(spectra);
            }

            return nonZeroCount;
        }

        /// <summary>
        /// Convert a LZF compressed and zero run length encoded byte array to a list of bin-intensity pairs
        /// </summary>
        /// <param name="compressedBinIntensity">LZF compressed and zero run length encoded byte array</param>
        /// <param name="basePeakIntensity">Highest intensity, and a data-type specifying parameter</param>
        /// <returns>List of tuples, where Item1 is the bin, and Item2 is the intensity</returns>
        public static List<Tuple<int, <#= typeName #>>> Decompress(byte[] compressedBinIntensity, out <#= typeName #> basePeakIntensity)
        {
            const int dataTypeSize = sizeof(<#= typeName #>);
            var output = CLZF2.Decompress(compressedBinIntensity);

            var numReturnedBins = output.Length / dataTypeSize;
            var encodedIntensityValueArray = new <#= typeName #>[numReturnedBins];
            Buffer.BlockCopy(output, 0, encodedIntensityValueArray, 0, numReturnedBins * dataTypeSize);

            var data = RlzEncode.Decode(encodedIntensityValueArray);
            basePeakIntensity = data.Max(x => x.Item2);
            return data;
        }
<#} #>
    }
}