<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ output extension=".cs" #>
<# // derived from https://stackoverflow.com/questions/32664/is-there-a-constraint-that-restricts-my-generic-method-to-numeric-types/4834066#4834066 #>
<# //Type[] types = new[] {
   // typeof(Int16), typeof(Int32), typeof(Int64),
   // typeof(UInt16), typeof(UInt32), typeof(UInt64),
   // typeof(Byte), typeof(SByte), typeof(Single), typeof(Double)
   // };
#>
<# // Item1 is the target type, Item2 is the datatype for MinValue (for zeroCount) #>
<# // These types should be limited to primitive types #>
<# Tuple<string, string>[] typeNames = new[] {
    new Tuple<string, string>("int", "int"),
    new Tuple<string, string>("short", "short"),
    new Tuple<string, string>("float", "short"),
    new Tuple<string, string>("double", "short"),
    };
#>
/*
* This file is automatically generated from RlzEncode.tt. Edit RlzEncode.tt to automatically update all type-specific variants of these functions.
*/
using System;
using System.Collections.Generic;

namespace UIMFLibrary
{
    /// <summary>
    /// Utilities for encoding intensity using run length encoding
    /// </summary>
    public static class RlzEncode
    {
<# foreach (var typeName in typeNames) {#>

        /// <summary>
        /// Convert an array of intensities to a zero length encoded array
        /// </summary>
        /// <param name="intensities">Array of intensities, including all zeros</param>
        /// <returns>
        /// Spectra intensities (output), run-length zero encoded
        /// </returns>
        public static <#= typeName.Item1 #>[] Encode(IReadOnlyList<<#= typeName.Item1 #>> intensities)
        {
            Encode(intensities, out var spectra, out _, out _, out _);

            return spectra;
        }

        /// <summary>
        /// Convert an array of intensities to a zero length encoded array
        /// </summary>
        /// <param name="intensities">Array of intensities, including all zeros</param>
        /// <param name="spectra">Spectra intensities (output), run-length zero encoded</param>
        /// <param name="tic">TIC (output)</param>
        /// <param name="bpi">Base peak intensity (output)</param>
        /// <param name="indexOfMaxIntensity">Index number of the BPI</param>
        /// <returns>
        /// Number of non-zero data points
        /// </returns>
        public static int Encode(
            IReadOnlyList<<#= typeName.Item1 #>> intensities,
            out <#= typeName.Item1 #>[] spectra,
            out double tic,
            out double bpi,
            out int indexOfMaxIntensity)
        {
            tic = 0;
            bpi = 0;
            indexOfMaxIntensity = 0;

            // RLZE - convert 0s to negative multiples as well as calculate TIC and BPI, BPI_MZ
            var zeroCount = 0;
            var rlzeDataList = new List<<#= typeName.Item1 #>>();
            var nonZeroCount = 0;

            // Calculate TIC and BPI while run length zero encoding
            for (var i = 0; i < intensities.Count; i++)
            {
                var intensity = intensities[i];
                if (intensity > 0)
                {
                    // TIC is just the sum of all intensities
                    tic += intensity;
                    if (intensity > bpi)
                    {
                        bpi = intensity;
                        indexOfMaxIntensity = i;
                    }

                    if (zeroCount < 0)
                    {
                        rlzeDataList.Add((<#= typeName.Item1 #>)zeroCount);
                        zeroCount = 0;
                    }

                    rlzeDataList.Add(intensity);
                    nonZeroCount++;
                }
                else
                {
                    if (zeroCount == <#= typeName.Item2 #>.MinValue)
                    {
                        // Too many zeros; append the current count to rlzeDataList and reset the count to avoid an underflow
                        rlzeDataList.Add((<#= typeName.Item1 #>)zeroCount);
                        zeroCount = 0;
                    }

                    // Always count the zero
                    zeroCount--;
                }
            }
            // We don't care about any zeros/zeroCount after the last non-zero value; it's better if we don't append them to rlzeDataList.

            spectra = rlzeDataList.ToArray();
            return nonZeroCount;
        }

        /// <summary>
        /// Convert an array of zero length encoded data to a list of bin-intensity pairs
        /// </summary>
        /// <param name="encoded">Spectra intensities, run-length zero encoded</param>
        /// <returns>List of tuples, where Item1 is the bin, and Item2 is the intensity</returns>
        public static List<Tuple<int, <#= typeName.Item1 #>>> Decode(IReadOnlyList<<#= typeName.Item1 #>> encoded)
        {
            var binIntensityTuples = new List<Tuple<int, <#= typeName.Item1 #>>>();
            <#= typeName.Item1 #> previousValue = 0;
            var binIndex = 0;

            foreach (var decodedIntensityValue in encoded)
            {
                if (decodedIntensityValue < 0)
                {
                    binIndex += -(int)decodedIntensityValue;
                }
                else if (Math.Abs(decodedIntensityValue) < float.Epsilon && (previousValue.Equals(short.MinValue) || previousValue.Equals(<#= typeName.Item1 #>.MinValue)))
                {
                    // Do nothing: this is to handle an old bug in the run-length zero encoding, that would do a
                    // double-output of a zero (output a zero, and add it to the zero count) if there were enough
                    // consecutive zeros to hit the underflow limit
                    // Really, the encoding we are using should never output a zero.
                }
                else
                {
                    binIntensityTuples.Add(new Tuple<int, <#= typeName.Item1 #>>(binIndex, decodedIntensityValue));
                    binIndex++;
                }
                previousValue = decodedIntensityValue;
            }
            return binIntensityTuples;
        }
<#} #>
    }
}